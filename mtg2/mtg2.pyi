from PIL import ImageFont, Image
from typing import Union, Optional, Literal, Dict, Tuple, List

class NotAColourError(Exception):
    def __init__(self, *args: object, **kwargs: str) -> None: ...
    def  __str__(self) -> str: ...

class Settings:
    def __init__(
        self,
        max_lines: int=4,
        font_size: int=72,
        std_xy: tuple[float, float]=(20.0, 50.0),
        spacing_xy: tuple[float, float]=(20.0, 105.0),
        dpath_table: Optional[str]=None,
        dpath_font: Optional[str]=None
    ) -> None: ...

class ColoursRGBA:
    def __init__(self) -> None: ...
    def __repr__(self) -> str: ...
    def __getitem__(self, key: str) -> Tuple[int, int, int, int]: ...
    def is_rgba(self, colour: Tuple[int, int, int, int]) -> bool: ...
    def hex_to_rgba(self, colour: str) -> Optional[Tuple[int, int, int, int]]: ...
    def get_colour_type(self, colour: Union[str, Tuple[int, int, int, int]]) -> Optional[Literal['rgba-colour', 'hex-colour', 'name-colour']]: ...
    def get_colour(self, colour: Union[str, Tuple[int, int, int, int]]) -> Optional[Tuple[int, int, int, int]]: ...
    def set_colour(self, name: str, colour: Union[str, Tuple[int, int, int, int]]) -> None: ...
    def set_colours(self, data: Dict[str, Union[str, Tuple[int, int, int, int]]]) -> None: ...

class ColourRGBA:
    def __init__(self, colour: Union[str, Tuple[int, int, int, int]], colours: Optional[ColoursRGBA]=None) -> None: ...
    def  __repr__(self) -> str: ...

def get_xy(
    text: str,
    idx: int,
    img: Image.Image,
    font: Union[ImageFont.FreeTypeFont, ImageFont.ImageFont],
    settings: Settings
) -> Tuple[float, float]: ...

def splitator(
    text: Union[str, List[str], Dict[int, str]],
    img: Image.Image,
    font: Union[ImageFont.FreeTypeFont, ImageFont.ImageFont],
    settings: Settings
) -> List[str]: ...

def generate_table(
    text: Union[str, List[str], Dict[int, str]],
    colour: Optional[ColourRGBA]=None,
    settings: Optional[Settings]=None
) -> Optional[Image.Image]: ...